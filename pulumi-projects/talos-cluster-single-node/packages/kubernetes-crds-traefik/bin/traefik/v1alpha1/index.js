"use strict";
// *** WARNING: this file was generated by crd2pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.TraefikServicePatch = exports.TraefikServiceList = exports.TraefikService = exports.TLSStorePatch = exports.TLSStoreList = exports.TLSStore = exports.TLSOptionPatch = exports.TLSOptionList = exports.TLSOption = exports.ServersTransportTCPPatch = exports.ServersTransportTCPList = exports.ServersTransportTCP = exports.ServersTransportPatch = exports.ServersTransportList = exports.ServersTransport = exports.MiddlewareTCPPatch = exports.MiddlewareTCPList = exports.MiddlewareTCP = exports.MiddlewarePatch = exports.MiddlewareList = exports.Middleware = exports.IngressRouteUDPPatch = exports.IngressRouteUDPList = exports.IngressRouteUDP = exports.IngressRouteTCPPatch = exports.IngressRouteTCPList = exports.IngressRouteTCP = exports.IngressRoutePatch = exports.IngressRouteList = exports.IngressRoute = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../../utilities");
exports.IngressRoute = null;
utilities.lazyLoad(exports, ["IngressRoute"], () => require("./ingressRoute"));
exports.IngressRouteList = null;
utilities.lazyLoad(exports, ["IngressRouteList"], () => require("./ingressRouteList"));
exports.IngressRoutePatch = null;
utilities.lazyLoad(exports, ["IngressRoutePatch"], () => require("./ingressRoutePatch"));
exports.IngressRouteTCP = null;
utilities.lazyLoad(exports, ["IngressRouteTCP"], () => require("./ingressRouteTCP"));
exports.IngressRouteTCPList = null;
utilities.lazyLoad(exports, ["IngressRouteTCPList"], () => require("./ingressRouteTCPList"));
exports.IngressRouteTCPPatch = null;
utilities.lazyLoad(exports, ["IngressRouteTCPPatch"], () => require("./ingressRouteTCPPatch"));
exports.IngressRouteUDP = null;
utilities.lazyLoad(exports, ["IngressRouteUDP"], () => require("./ingressRouteUDP"));
exports.IngressRouteUDPList = null;
utilities.lazyLoad(exports, ["IngressRouteUDPList"], () => require("./ingressRouteUDPList"));
exports.IngressRouteUDPPatch = null;
utilities.lazyLoad(exports, ["IngressRouteUDPPatch"], () => require("./ingressRouteUDPPatch"));
exports.Middleware = null;
utilities.lazyLoad(exports, ["Middleware"], () => require("./middleware"));
exports.MiddlewareList = null;
utilities.lazyLoad(exports, ["MiddlewareList"], () => require("./middlewareList"));
exports.MiddlewarePatch = null;
utilities.lazyLoad(exports, ["MiddlewarePatch"], () => require("./middlewarePatch"));
exports.MiddlewareTCP = null;
utilities.lazyLoad(exports, ["MiddlewareTCP"], () => require("./middlewareTCP"));
exports.MiddlewareTCPList = null;
utilities.lazyLoad(exports, ["MiddlewareTCPList"], () => require("./middlewareTCPList"));
exports.MiddlewareTCPPatch = null;
utilities.lazyLoad(exports, ["MiddlewareTCPPatch"], () => require("./middlewareTCPPatch"));
exports.ServersTransport = null;
utilities.lazyLoad(exports, ["ServersTransport"], () => require("./serversTransport"));
exports.ServersTransportList = null;
utilities.lazyLoad(exports, ["ServersTransportList"], () => require("./serversTransportList"));
exports.ServersTransportPatch = null;
utilities.lazyLoad(exports, ["ServersTransportPatch"], () => require("./serversTransportPatch"));
exports.ServersTransportTCP = null;
utilities.lazyLoad(exports, ["ServersTransportTCP"], () => require("./serversTransportTCP"));
exports.ServersTransportTCPList = null;
utilities.lazyLoad(exports, ["ServersTransportTCPList"], () => require("./serversTransportTCPList"));
exports.ServersTransportTCPPatch = null;
utilities.lazyLoad(exports, ["ServersTransportTCPPatch"], () => require("./serversTransportTCPPatch"));
exports.TLSOption = null;
utilities.lazyLoad(exports, ["TLSOption"], () => require("./tlsoption"));
exports.TLSOptionList = null;
utilities.lazyLoad(exports, ["TLSOptionList"], () => require("./tlsoptionList"));
exports.TLSOptionPatch = null;
utilities.lazyLoad(exports, ["TLSOptionPatch"], () => require("./tlsoptionPatch"));
exports.TLSStore = null;
utilities.lazyLoad(exports, ["TLSStore"], () => require("./tlsstore"));
exports.TLSStoreList = null;
utilities.lazyLoad(exports, ["TLSStoreList"], () => require("./tlsstoreList"));
exports.TLSStorePatch = null;
utilities.lazyLoad(exports, ["TLSStorePatch"], () => require("./tlsstorePatch"));
exports.TraefikService = null;
utilities.lazyLoad(exports, ["TraefikService"], () => require("./traefikService"));
exports.TraefikServiceList = null;
utilities.lazyLoad(exports, ["TraefikServiceList"], () => require("./traefikServiceList"));
exports.TraefikServicePatch = null;
utilities.lazyLoad(exports, ["TraefikServicePatch"], () => require("./traefikServicePatch"));
const _module = {
    version: utilities.getVersion(),
    construct: (name, type, urn) => {
        switch (type) {
            case "kubernetes:traefik.io/v1alpha1:IngressRoute":
                return new exports.IngressRoute(name, undefined, { urn });
            case "kubernetes:traefik.io/v1alpha1:IngressRouteList":
                return new exports.IngressRouteList(name, undefined, { urn });
            case "kubernetes:traefik.io/v1alpha1:IngressRoutePatch":
                return new exports.IngressRoutePatch(name, undefined, { urn });
            case "kubernetes:traefik.io/v1alpha1:IngressRouteTCP":
                return new exports.IngressRouteTCP(name, undefined, { urn });
            case "kubernetes:traefik.io/v1alpha1:IngressRouteTCPList":
                return new exports.IngressRouteTCPList(name, undefined, { urn });
            case "kubernetes:traefik.io/v1alpha1:IngressRouteTCPPatch":
                return new exports.IngressRouteTCPPatch(name, undefined, { urn });
            case "kubernetes:traefik.io/v1alpha1:IngressRouteUDP":
                return new exports.IngressRouteUDP(name, undefined, { urn });
            case "kubernetes:traefik.io/v1alpha1:IngressRouteUDPList":
                return new exports.IngressRouteUDPList(name, undefined, { urn });
            case "kubernetes:traefik.io/v1alpha1:IngressRouteUDPPatch":
                return new exports.IngressRouteUDPPatch(name, undefined, { urn });
            case "kubernetes:traefik.io/v1alpha1:Middleware":
                return new exports.Middleware(name, undefined, { urn });
            case "kubernetes:traefik.io/v1alpha1:MiddlewareList":
                return new exports.MiddlewareList(name, undefined, { urn });
            case "kubernetes:traefik.io/v1alpha1:MiddlewarePatch":
                return new exports.MiddlewarePatch(name, undefined, { urn });
            case "kubernetes:traefik.io/v1alpha1:MiddlewareTCP":
                return new exports.MiddlewareTCP(name, undefined, { urn });
            case "kubernetes:traefik.io/v1alpha1:MiddlewareTCPList":
                return new exports.MiddlewareTCPList(name, undefined, { urn });
            case "kubernetes:traefik.io/v1alpha1:MiddlewareTCPPatch":
                return new exports.MiddlewareTCPPatch(name, undefined, { urn });
            case "kubernetes:traefik.io/v1alpha1:ServersTransport":
                return new exports.ServersTransport(name, undefined, { urn });
            case "kubernetes:traefik.io/v1alpha1:ServersTransportList":
                return new exports.ServersTransportList(name, undefined, { urn });
            case "kubernetes:traefik.io/v1alpha1:ServersTransportPatch":
                return new exports.ServersTransportPatch(name, undefined, { urn });
            case "kubernetes:traefik.io/v1alpha1:ServersTransportTCP":
                return new exports.ServersTransportTCP(name, undefined, { urn });
            case "kubernetes:traefik.io/v1alpha1:ServersTransportTCPList":
                return new exports.ServersTransportTCPList(name, undefined, { urn });
            case "kubernetes:traefik.io/v1alpha1:ServersTransportTCPPatch":
                return new exports.ServersTransportTCPPatch(name, undefined, { urn });
            case "kubernetes:traefik.io/v1alpha1:TLSOption":
                return new exports.TLSOption(name, undefined, { urn });
            case "kubernetes:traefik.io/v1alpha1:TLSOptionList":
                return new exports.TLSOptionList(name, undefined, { urn });
            case "kubernetes:traefik.io/v1alpha1:TLSOptionPatch":
                return new exports.TLSOptionPatch(name, undefined, { urn });
            case "kubernetes:traefik.io/v1alpha1:TLSStore":
                return new exports.TLSStore(name, undefined, { urn });
            case "kubernetes:traefik.io/v1alpha1:TLSStoreList":
                return new exports.TLSStoreList(name, undefined, { urn });
            case "kubernetes:traefik.io/v1alpha1:TLSStorePatch":
                return new exports.TLSStorePatch(name, undefined, { urn });
            case "kubernetes:traefik.io/v1alpha1:TraefikService":
                return new exports.TraefikService(name, undefined, { urn });
            case "kubernetes:traefik.io/v1alpha1:TraefikServiceList":
                return new exports.TraefikServiceList(name, undefined, { urn });
            case "kubernetes:traefik.io/v1alpha1:TraefikServicePatch":
                return new exports.TraefikServicePatch(name, undefined, { urn });
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("@nifr/pulumi-crd-traefik", "traefik.io/v1alpha1", _module);
//# sourceMappingURL=index.js.map